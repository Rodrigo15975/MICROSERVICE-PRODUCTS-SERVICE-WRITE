generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Products {
  id          Int      @id @default(autoincrement())
  product     String   @unique
  size        String[]
  price       Decimal  @db.Decimal(10, 2)
  gender      String
  brand       String
  description String
  quantity    Int
  is_new      Boolean
  discount    Int?
  categoryId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  coupon Coupon[]

  productInventory ProductInventory?
  productVariant   ProductVariant[]
  category         Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  total_sold       ProductTotalSould?

  @@index([categoryId])
  @@index([price])
  @@index([product])
  @@index([gender])
  @@index([size])
  @@index([brand])
  @@index([is_new])
}

model ProductTotalSould {
  id         Int @id @default(autoincrement())
  total_sold Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products   Products @relation(fields: [productsId], references: [id], onDelete: Cascade)
  productsId Int      @unique

  @@index([total_sold])
  @@map("products_total_sold")
}

model ProductVariant {
  id         Int      @id @default(autoincrement())
  color      String
  url        String
  key_url    String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  productsId Int
  Products   Products @relation(fields: [productsId], references: [id], onDelete: Cascade)

  @@index([color])
  @@index([url])
  @@index([key_url])
}

model ProductInventory {
  id         Int      @id @default(autoincrement())
  minStock   Int
  stock      Boolean
  productsId Int      @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  products   Products @relation(fields: [productsId], references: [id], onDelete: Cascade)

  @@index([minStock])
}

model Category {
  id            Int            @id @default(autoincrement())
  category      String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  products      Products[]
  discountRules DicountRules[]

  @@index([category])
  @@map("categories")
}

model Coupon {
  id         Int      @id @default(autoincrement())
  discount   Int
  espiryDate DateTime
  isGlobal   Boolean
  isNew      Boolean
  code       String   @unique
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt

  productsId Int?
  products   Products? @relation(fields: [productsId], references: [id], onDelete: Cascade)

  @@index([isNew])
  @@index([code])
  @@index([isGlobal])
  @@index([espiryDate])
}

model DicountRules {
  id         Int      @id @default(autoincrement())
  categoryId Int
  discount   Int
  start_date String
  end_date   String
  is_active  Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([is_active])
  @@index([start_date])
  @@index([end_date])
  @@index([categoryId])
  @@map("discount_rules")
}
